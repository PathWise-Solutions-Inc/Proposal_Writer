version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: proposal-writer-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: proposal_writer
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - proposal-writer-network

  # MongoDB Database
  mongodb:
    image: mongo:7-jammy
    container_name: proposal-writer-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: proposal_writer
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - proposal-writer-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: proposal-writer-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - proposal-writer-network

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.3
    container_name: proposal-writer-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - proposal-writer-network

  # Apache Tika Server
  tika:
    image: apache/tika:latest-full
    container_name: proposal-writer-tika
    ports:
      - "9998:9998"
    networks:
      - proposal-writer-network

  # Auth Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: proposal-writer-auth-service
    environment:
      NODE_ENV: development
      PORT: 8001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: proposal_writer_auth
      DB_USER: postgres
      DB_PASSWORD: postgres
      REDIS_URL: redis://redis:6379
    ports:
      - "8001:8001"
    depends_on:
      - postgres
      - redis
    networks:
      - proposal-writer-network
    volumes:
      - ./services/auth-service:/app
      - /app/node_modules

  # RFP Analysis Service
  rfp-analysis-service:
    build:
      context: ./services/rfp-analysis-service
      dockerfile: Dockerfile
    container_name: proposal-writer-rfp-service
    environment:
      NODE_ENV: development
      PORT: 8002
      MONGODB_URI: mongodb://admin:admin123@mongodb:27017/proposal_writer?authSource=admin
      REDIS_URL: redis://redis:6379
    ports:
      - "8002:8002"
    depends_on:
      - mongodb
      - redis
    networks:
      - proposal-writer-network
    volumes:
      - ./services/rfp-analysis-service:/app
      - /app/node_modules

  # Web App (Frontend)
  web-app:
    build:
      context: ./packages/web-app
      dockerfile: Dockerfile.dev
    container_name: proposal-writer-web-app
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:8080/api
    ports:
      - "3000:3000"
    networks:
      - proposal-writer-network
    volumes:
      - ./packages/web-app:/app
      - /app/node_modules

  # API Gateway (Kong)
  kong:
    image: kong:3.5
    container_name: proposal-writer-kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    ports:
      - "8080:8000"    # Proxy port
      - "8443:8443"    # SSL Proxy port
      - "8081:8001"    # Admin API
    volumes:
      - ./kong/kong.yml:/kong/declarative/kong.yml
    networks:
      - proposal-writer-network

networks:
  proposal-writer-network:
    driver: bridge

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  elasticsearch_data: